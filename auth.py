""" Authentication module for validating access tokens generated by Keycloak
"""
import os
import logging
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
import jwt

LOGGER = logging.getLogger(__name__)

KEYCLOAK_PUBLIC_KEY = os.getenv('KEYCLOAK_PUBLIC_KEY')

# Parse request header and pass the token
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/token")

# RSA public key format
keycloak_public_key = '-----BEGIN PUBLIC KEY-----\n' + \
    KEYCLOAK_PUBLIC_KEY + '\n-----END PUBLIC KEY-----'


async def authenticate(token: str = Depends(oauth2_scheme)):
    """ Returns True when validation of the token is successful """
    try:
        jwt.decode(token, keycloak_public_key, algorithm='RS256')
        return True
    except Exception as exception:
        detail = 'Could not validate the credential ({})'.format(exception)
        LOGGER.error(detail)
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=detail,
            headers={'WWW-Authenticate': 'Bearer'},
        )
